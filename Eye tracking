{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "37bb9a92-bf46-49ef-b0b8-54b5b1a70c66",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Left eye - Horizontal direction changed by: 154.0 8.875000003172318e-05\n",
      "Left eye - Vertical direction changed by: 165.0 0.00041112500002782326\n",
      "Right eye - Horizontal direction changed by: 347.0\n",
      "Right eye - Vertical direction changed by: 159.0 5.582999619946349e-06\n",
      "Left eye - Vertical direction changed by: 40.0 8.604199956607772e-05\n",
      "Right eye - Vertical direction changed by: 35.0 0.0003215420001652092\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "import cv2\n",
    "import mediapipe as mp\n",
    "import timeit\n",
    "import pyautogui\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import csv\n",
    "import seaborn as sns\n",
    "from PIL import ImageGrab\n",
    "\n",
    "total_time_final = 0\n",
    "header = [\n",
    "      \"Timestamp\", \"Latency Values Left X\", \"Latency Values Left Y\", \"Latency Values Right X\", \"Latency Values Right Y\", \n",
    "    \"All positions left horizontal\", \"All positions left vertical\", \"All positions right horizontal\", \"All positions right vertical\", \n",
    "    \"Position change left horizontal\", \"Position Change left vertical\", \"Position Change right horizontal\", \"Position change right vertical\", \n",
    "    \"Left linger\", \"Right Linger\"\n",
    "]\n",
    "with open('eyetracking.csv', 'w', newline='') as file:\n",
    "    csv_writer = csv.writer(file)\n",
    "    csv_writer.writerow(header)\n",
    "    \n",
    "cap = cv2.VideoCapture(0)\n",
    "latency_vals_left_x = []\n",
    "latency_vals_left_y = []\n",
    "latency_vals_right_x = []\n",
    "latency_vals_right_y = []\n",
    "\n",
    "all_positions_left_horizontal = []\n",
    "all_positions_left_vertical = []\n",
    "all_positions_right_horizontal = []\n",
    "all_positions_right_vertical = []\n",
    "\n",
    "position_change_horizontal_left = 0\n",
    "position_change_vertical_left = 0\n",
    "position_change_horizontal_right = 0\n",
    "position_change_vertical_right = 0\n",
    "\n",
    "change_positions = []\n",
    "movement_threshold = 30  # Define a threshold for significant movement\n",
    "start_left_x, start_left_y = 0, 0\n",
    "start_right_x, start_right_y = 0, 0\n",
    "\n",
    "capture_interval = 5\n",
    "last_capture_time = time.time()\n",
    "\n",
    "# Additional lists to store gaze linger times\n",
    "linger_times_left = []\n",
    "linger_times_right = []\n",
    "\n",
    "# Function to detect iris locations and segregate left and right eye\n",
    "def get_irises_location(frame_gray):\n",
    "    eye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_eye.xml')\n",
    "    eyes = eye_cascade.detectMultiScale(frame_gray, 1.3, 10)  # Detect eyes\n",
    "    irises = []\n",
    "\n",
    "    for (ex, ey, ew, eh) in eyes:\n",
    "        iris_x = int(ex + float(ew / 2))  # Iris center X\n",
    "        iris_y = int(ey + float(eh / 2))  # Iris center Y\n",
    "        irises.append([np.float32(iris_x), np.float32(iris_y)])\n",
    "\n",
    "    # Sort based on X-coordinate to segregate left and right eyes\n",
    "    if len(irises) >= 2:\n",
    "        irises = sorted(irises, key=lambda x: x[0])  # Sort by X (horizontal position)\n",
    "        left_eye = irises[0]  # First is left eye\n",
    "        right_eye = irises[1]  # Second is right eye\n",
    "        return np.array(left_eye), np.array(right_eye)\n",
    "    return None, None  # If less than 2 eyes detected\n",
    "\n",
    "\n",
    "\n",
    "def update_linger_times(linger_times, all_positions_horizontal, all_positions_vertical, iris_x, iris_y, capture_interval):\n",
    "    if linger_times and all_positions_horizontal[-2] == iris_x and all_positions_vertical[-2] == iris_y:\n",
    "        linger_times[-1] += capture_interval\n",
    "    else:\n",
    "        linger_times.append(capture_interval)\n",
    "\n",
    "# Initialize Haar cascades for face and eye detection\n",
    "face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')\n",
    "\n",
    "# Initialize video capture from webcam\n",
    "cap = cv2.VideoCapture(0)\n",
    "start = time.time()\n",
    "\n",
    "while True:\n",
    "    # Capture each frame from webcam\n",
    "    ret, frame = cap.read()\n",
    "    if not ret:\n",
    "        break\n",
    "\n",
    "    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n",
    "    gray = cv2.equalizeHist(gray)  # Histogram equalization for better detection\n",
    "\n",
    "    # Detect faces in the frame\n",
    "    faces = face_cascade.detectMultiScale(gray, 1.3, 5)\n",
    "    for (x, y, w, h) in faces:\n",
    "        roi_gray = gray[y:y+h, x:x+w]\n",
    "        roi_color = frame[y:y+h, x:x+w]\n",
    "\n",
    "        # Get irises location and segregate left and right eye\n",
    "        left_eye, right_eye = get_irises_location(roi_gray)\n",
    "\n",
    "        # Initialize timing\n",
    "        start_time = timeit.default_timer()\n",
    "        start_time_all_left_x = timeit.default_timer()\n",
    "        start_time_all_left_y = start_time_all_left_x\n",
    "        start_time_all_right_x = start_time_all_left_x\n",
    "        start_time_all_right_y = start_time_all_left_x\n",
    "\n",
    "        if left_eye is not None and right_eye is not None:\n",
    "            # Unpack left and right eye positions\n",
    "            iris_left_x, iris_left_y = left_eye\n",
    "            iris_right_x, iris_right_y = right_eye\n",
    "\n",
    "            # Process the left eye\n",
    "            all_positions_left_horizontal.append(iris_left_x)\n",
    "            all_positions_left_vertical.append(iris_left_y)\n",
    "            cv2.circle(roi_color, (int(iris_left_x), int(iris_left_y)), 2, (0, 255, 255), -1)\n",
    "\n",
    "            # Update latency for left eye horizontal movement\n",
    "            if abs(iris_left_x - start_left_x) > 5:\n",
    "                end_time_all_left_x = timeit.default_timer()\n",
    "                latency_left_x = end_time_all_left_x - start_time_all_left_x\n",
    "                latency_vals_left_x.append(latency_left_x)\n",
    "                start_time_all_left_x = end_time_all_left_x  # Update start time for left x\n",
    "\n",
    "            # Update latency for left eye vertical movement\n",
    "            if abs(iris_left_y - start_left_y) > 5:\n",
    "                end_time_all_left_y = timeit.default_timer()\n",
    "                latency_left_y = end_time_all_left_y - start_time_all_left_y\n",
    "                latency_vals_left_y.append(latency_left_y)\n",
    "                start_time_all_left_y = end_time_all_left_y  # Update start time for left y\n",
    "\n",
    "            # Check for significant horizontal movement in the left eye\n",
    "            if abs(iris_left_x - start_left_x) > movement_threshold:\n",
    "                end_time = timeit.default_timer()\n",
    "                latency_horizontal_left = end_time - start_time\n",
    "                position_change_horizontal_left = iris_left_x - start_left_x\n",
    "\n",
    "                change_positions.append(position_change_horizontal_left)\n",
    "                print(\"Left eye - Horizontal direction changed by:\", position_change_horizontal_left, latency_horizontal_left)\n",
    "\n",
    "                start_left_x = iris_left_x\n",
    "                start_time = end_time\n",
    "\n",
    "            # Check for significant vertical movement in the left eye\n",
    "            if abs(iris_left_y - start_left_y) > movement_threshold:\n",
    "                end_time = timeit.default_timer()\n",
    "                latency_vertical_left = end_time - start_time\n",
    "                position_change_vertical_left = iris_left_y - start_left_y\n",
    "\n",
    "                change_positions.append(position_change_vertical_left)\n",
    "                print(\"Left eye - Vertical direction changed by:\", position_change_vertical_left, latency_vertical_left)\n",
    "\n",
    "                start_left_y = iris_left_y\n",
    "                start_time = end_time\n",
    "  \n",
    "               # Update linger times for left eye position\n",
    "            update_linger_times(linger_times_left, all_positions_left_horizontal, all_positions_left_vertical, iris_left_x, iris_left_y, capture_interval)\n",
    "            \n",
    "            # Process the right eye\n",
    "            all_positions_right_horizontal.append(iris_right_x)\n",
    "            all_positions_right_vertical.append(iris_right_y)\n",
    "            cv2.circle(roi_color, (int(iris_right_x), int(iris_right_y)), 2, (255, 0, 255), -1)\n",
    "       \n",
    "            # Update latency for right eye horizontal movement\n",
    "            if abs(iris_right_x - start_right_x) > 5:\n",
    "                end_time_all_right_x = timeit.default_timer()\n",
    "                latency_right_x = end_time_all_right_x - start_time_all_right_x\n",
    "                latency_vals_right_x.append(latency_right_x)\n",
    "                start_time_all_right_x = end_time_all_right_x  # Update start time for right x\n",
    "\n",
    "            # Update latency for right eye vertical movement\n",
    "            if abs(iris_right_y - start_right_y) > 5:\n",
    "                end_time_all_right_y = timeit.default_timer()\n",
    "                latency_right_y = end_time_all_right_y - start_time_all_right_y\n",
    "                latency_vals_right_y.append(latency_right_y)\n",
    "                start_time_all_right_y = end_time_all_right_y  # Update start time for right y\n",
    "\n",
    "            # Check for significant horizontal movement in the right eye\n",
    "            if abs(iris_right_x - start_right_x) > movement_threshold:\n",
    "                end_time = timeit.default_timer()\n",
    "                latency_horizontal_right = end_time - start_time\n",
    "                position_change_horizontal_right = iris_right_x - start_right_x\n",
    "\n",
    "                change_positions.append(position_change_horizontal_right)\n",
    "                print(\"Right eye - Horizontal direction changed by:\", position_change_horizontal_right)\n",
    "\n",
    "                start_right_x = iris_right_x\n",
    "                start_time = end_time\n",
    "\n",
    "            # Check for significant vertical movement in the right eye\n",
    "            if abs(iris_right_y - start_right_y) > movement_threshold:\n",
    "                end_time = timeit.default_timer()\n",
    "                latency_vertical_right = end_time - start_time\n",
    "                position_change_vertical_right = iris_right_y - start_right_y\n",
    "\n",
    "                change_positions.append(position_change_vertical_right)\n",
    "                print(\"Right eye - Vertical direction changed by:\", position_change_vertical_right, latency_vertical_right)\n",
    "\n",
    "                start_right_y = iris_right_y\n",
    "                start_time = end_time\n",
    "   \n",
    "            # Update linger times for right eye position\n",
    "            update_linger_times(linger_times_right, all_positions_right_horizontal, all_positions_right_vertical, iris_right_x, iris_right_y, capture_interval)\n",
    "\n",
    "            # Capture screen at the set interval\n",
    "            if time.time() - last_capture_time >= capture_interval:\n",
    "                # Reset capture timer\n",
    "                last_capture_time = time.time()\n",
    "        \n",
    "                # Generate unique timestamp for filenames\n",
    "                timestamp = int(time.time())\n",
    "        \n",
    "                # Capture screenshot\n",
    "                screenshot = ImageGrab.grab()\n",
    "                screenshot.save(f\"screenshot_{timestamp}.png\")\n",
    "                width, height = screenshot.size\n",
    "                my_dpi = 118\n",
    "        \n",
    "                # Map linger times to opacity values\n",
    "                left_opacities = [min(linger / 10, 1.0) for linger in linger_times_left]\n",
    "                right_opacities = [min(linger / 10, 1.0) for linger in linger_times_right]\n",
    "        \n",
    "                # Scatter plot for left eye\n",
    "                plt.figure(figsize=(width / my_dpi, height / my_dpi))\n",
    "                plt.scatter(all_positions_left_horizontal, all_positions_left_vertical, \n",
    "                            color='red', label='Left Eye', s=500, alpha=left_opacities)\n",
    "                plt.axis('off')\n",
    "                plt.tight_layout(pad=1)\n",
    "                plt.savefig(f'left_eye_scatter_{timestamp}.png', dpi=my_dpi * 2)\n",
    "                plt.close()\n",
    "        \n",
    "                # Scatter plot for right eye\n",
    "                plt.figure(figsize=(width / my_dpi, height / my_dpi))\n",
    "                plt.scatter(all_positions_right_horizontal, all_positions_right_vertical, \n",
    "                            color='red', label='Right Eye', s=500, alpha=right_opacities)\n",
    "                plt.axis('off')\n",
    "                plt.tight_layout(pad=1)\n",
    "                plt.savefig(f'right_eye_scatter_{timestamp}.png', dpi=my_dpi * 2)\n",
    "                plt.close()\n",
    "        \n",
    "                # Load the screenshots\n",
    "                img1 = cv2.imread(f'screenshot_{timestamp}.png')\n",
    "                left_eye_img = cv2.imread(f'left_eye_scatter_{timestamp}.png')\n",
    "                right_eye_img = cv2.imread(f'right_eye_scatter_{timestamp}.png')\n",
    "        \n",
    "                # Resize scatter plots if necessary\n",
    "                if img1.shape != left_eye_img.shape:\n",
    "                    left_eye_img = cv2.resize(left_eye_img, (img1.shape[1], img1.shape[0]))\n",
    "                if img1.shape != right_eye_img.shape:\n",
    "                    right_eye_img = cv2.resize(right_eye_img, (img1.shape[1], img1.shape[0]))\n",
    "        \n",
    "                # Overlay scatter plots on the screenshot\n",
    "                left_eye_overlay = cv2.addWeighted(img1, 0.7, left_eye_img, 0.3, 0)\n",
    "                combined_overlay = cv2.addWeighted(left_eye_overlay, 0.7, right_eye_img, 0.3, 0)\n",
    "        \n",
    "                cv2.imwrite(f'Output_Left_Right_Eye_Scatter_{timestamp}.png', combined_overlay)\n",
    "\n",
    "    # Display the resulting frame\n",
    "    cv2.imshow('Eye Movement Tracking', frame)\n",
    "\n",
    "    # Break the loop on 'q' key press\n",
    "    if cv2.waitKey(1) & 0xFF == ord('q'):\n",
    "        row = [\n",
    "            time.time(), latency_vals_left_x, latency_vals_left_y, latency_vals_right_x, latency_vals_right_y,\n",
    "            all_positions_left_horizontal, all_positions_left_vertical, all_positions_right_horizontal, all_positions_right_vertical,\n",
    "            position_change_horizontal_left, position_change_vertical_left, position_change_horizontal_right, position_change_vertical_right,\n",
    "            linger_times_left, linger_times_right\n",
    "        ]\n",
    "        \n",
    "        with open('eyetracking.csv', 'a', newline='') as file:\n",
    "            csv_writer = csv.writer(file)\n",
    "            csv_writer.writerow(row)\n",
    "        \n",
    "        break\n",
    "\n",
    "end = time.time()\n",
    "total_time_final = end - start\n",
    "\n",
    "# Release the capture and destroy windows\n",
    "cap.release()\n",
    "cv2.destroyAllWindows()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8b6b3b4f-23af-41ee-9300-725ef9862470",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "# Ensure total_time_final has the same length as all_positions_left_horizontal\n",
    "total_time_final = np.linspace(0, 10, len(all_positions_left_horizontal))\n",
    "\n",
    "# Trim latency_vals_left_x to match the size of all_positions_left_horizontal\n",
    "min_length = min(len(all_positions_left_horizontal), len(latency_vals_left_x))\n",
    "all_positions_left_horizontal = all_positions_left_horizontal[:min_length]\n",
    "latency_vals_left_x = latency_vals_left_x[:min_length]\n",
    "total_time_final = total_time_final[:min_length]\n",
    "\n",
    "# Calculate the change in positions for line thickness\n",
    "thickness = np.abs(np.diff(all_positions_left_horizontal, prepend=all_positions_left_horizontal[0]))\n",
    "\n",
    "# Create a scatter plot with a color map based on latency_vals_left_x\n",
    "scatter = plt.scatter(total_time_final, all_positions_left_horizontal, c=latency_vals_left_x, cmap='hot', s=50)\n",
    " \n",
    "# Plot lines with varying thickness\n",
    "for i in range(len(total_time_final) - 1):\n",
    "    plt.plot([total_time_final[i], total_time_final[i + 1]], \n",
    "             [all_positions_left_horizontal[i], all_positions_left_horizontal[i + 1]], \n",
    "             color='blue')  # Scale line thickness based on movement\n",
    "\n",
    "# Add a color bar to reflect the latency values\n",
    "plt.colorbar(scatter, label='Latency')\n",
    "\n",
    "# Labeling the axes\n",
    "plt.xlabel('Total Time')\n",
    "plt.ylabel('Left Eye Horizontal Positions')\n",
    "\n",
    "# Display the plot\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c1f9696a-512c-42a7-9be0-8cf120f51b59",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "# Ensure total_time_final has the same length as all_positions_left_vertical\n",
    "total_time_final = np.linspace(0, 10, len(all_positions_left_vertical))\n",
    "\n",
    "# Trim latency_vals_left_y to match the size of all_positions_left_vertical\n",
    "min_length = min(len(all_positions_left_vertical), len(latency_vals_left_y))\n",
    "all_positions_left_vertical = all_positions_left_vertical[:min_length]\n",
    "latency_vals_left_y = latency_vals_left_y[:min_length]\n",
    "total_time_final = total_time_final[:min_length]\n",
    "\n",
    "# Calculate the change in positions for line thickness\n",
    "thickness = np.abs(np.diff(all_positions_left_vertical, prepend=all_positions_left_vertical[0]))\n",
    "\n",
    "# Create a scatter plot with a color map based on latency_vals_left_y\n",
    "scatter = plt.scatter(total_time_final, all_positions_left_vertical, c=latency_vals_left_y, cmap='hot', s=50)\n",
    "\n",
    "# Plot lines with varying thickness\n",
    "for i in range(len(total_time_final) - 1):\n",
    "    plt.plot([total_time_final[i], total_time_final[i + 1]], \n",
    "             [all_positions_left_vertical[i], all_positions_left_vertical[i + 1]], \n",
    "             color='blue')  # Scale line thickness based on movement\n",
    "\n",
    "# Add a color bar to reflect the latency values\n",
    "plt.colorbar(scatter, label='Latency')\n",
    "\n",
    "# Labeling the axes\n",
    "plt.xlabel('Total Time')\n",
    "plt.ylabel('Left Eye Vertical Positions')\n",
    "\n",
    "# Display the plot\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "31c2b950-93e7-4296-b985-7a8ad6a43ada",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "# Ensure total_time_final has the same length as all_positions_right_vertical\n",
    "total_time_final = np.linspace(0, 10, len(all_positions_right_vertical))\n",
    "\n",
    "# Trim latency_vals_right_y to match the size of all_positions_right_vertical\n",
    "min_length = min(len(all_positions_right_vertical), len(latency_vals_right_y))\n",
    "all_positions_right_vertical = all_positions_right_vertical[:min_length]\n",
    "latency_vals_right_y = latency_vals_right_y[:min_length]\n",
    "total_time_final = total_time_final[:min_length]\n",
    "\n",
    "# Calculate the change in positions for line thickness\n",
    "thickness = np.abs(np.diff(all_positions_right_vertical, prepend=all_positions_right_vertical[0]))\n",
    "\n",
    "# Create a scatter plot with a color map based on latency_vals_right_y\n",
    "scatter = plt.scatter(total_time_final, all_positions_right_vertical, c=latency_vals_right_y, cmap='hot', s=50)\n",
    "\n",
    "# Plot lines with varying thickness\n",
    "for i in range(len(total_time_final) - 1):\n",
    "    plt.plot([total_time_final[i], total_time_final[i + 1]], \n",
    "             [all_positions_right_vertical[i], all_positions_right_vertical[i + 1]], \n",
    "             color='blue')  # Scale line thickness based on movement\n",
    "\n",
    "# Add a color bar to reflect the latency values\n",
    "plt.colorbar(scatter, label='Latency')\n",
    "\n",
    "# Labeling the axes\n",
    "plt.xlabel('Total Time')\n",
    "plt.ylabel('Right Eye Vertical Positions')\n",
    "\n",
    "# Display the plot\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b93e47d3-563d-4822-8b88-06f3f0762569",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "# Ensure total_time_final has the same length as all_positions_right_horizontal\n",
    "total_time_final = np.linspace(0, 10, len(all_positions_right_horizontal))\n",
    "\n",
    "# Trim latency_vals_right_x to match the size of all_positions_right_horizontal\n",
    "min_length = min(len(all_positions_right_horizontal), len(latency_vals_right_x))\n",
    "all_positions_right_horizontal = all_positions_right_horizontal[:min_length]\n",
    "latency_vals_right_x = latency_vals_right_x[:min_length]\n",
    "total_time_final = total_time_final[:min_length]\n",
    "\n",
    "# Calculate the change in positions for line thickness\n",
    "thickness = np.abs(np.diff(all_positions_right_horizontal, prepend=all_positions_right_horizontal[0]))\n",
    "\n",
    "# Create a scatter plot with a color map based on latency_vals_right_x\n",
    "scatter = plt.scatter(total_time_final, all_positions_right_horizontal, c=latency_vals_right_x, cmap='hot', s=50)\n",
    "\n",
    "# Plot lines with varying thickness\n",
    "for i in range(len(total_time_final) - 1):\n",
    "    plt.plot([total_time_final[i], total_time_final[i + 1]], \n",
    "             [all_positions_right_horizontal[i], all_positions_right_horizontal[i + 1]], \n",
    "             color='blue')  # Scale line thickness based on movement\n",
    "\n",
    "# Add a color bar to reflect the latency values\n",
    "plt.colorbar(scatter, label='Latency')\n",
    "\n",
    "# Labeling the axes\n",
    "plt.xlabel('Total Time')\n",
    "plt.ylabel('Right Eye Horizontal Positions')\n",
    "\n",
    "# Display the plot\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "16fdbf88-5e31-40f4-8661-536854b64b6c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9c17c96f-093e-436e-9e51-c22235077066",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
